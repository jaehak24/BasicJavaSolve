열거형
여러 상수들을 편안하게 선언할 수 있는 열거형 문법

enum은서로 연관된 상수들의 집합이다.

기존에 상수들을 정의하기 위해서는 다음과 같이 코드를 작성했다.
public static final int SPRING = 1;
public static final int SUMMER = 2;
public static final int FALL   = 3;
public static final int WINTER = 4;

public static final int DJANGO  = 1;
public static final int SPRING  = 2;  계절의 SPRING과 중복 발생!
public static final int NEST    = 3;
public static final int EXPRESS = 4
하지만 아래 코드에서 볼 수 있듯이 중복 변수가 있으면 에러가 뜨기 마련이었다.
인터페이스를 바꾸는 해결법을 써보면
interface Seasons {
	int SPRING = 1, SUMMER = 2, FALL = 3, WINTER = 4;
}

interface Frameworks {
	int DJANGO = 1, SPRING = 2, NEST = 3, EXPRESS = 4;
}
다음과 같은 조건문에서 타입 안전성 때문에 사용이 용이하지는 않다.

if (Seasons.SPRING == Frameworks.SPRING) {...생략...}
그래서 변수의 인터페이스의 맥락과 변수의 의미를 고려하면 다음과 같이 선언해야 한다.

class Seasons {
    public static final Seasons SPRING = new Seasons();
    public static final Seasons SUMMER = new Seasons();
    public static final Seasons FALL   = new Seasons();
    public static final Seasons WINTER = new Seasons();
}

class Frameworks {
    public static final Frameworks DJANGO  = new Frameworks();
    public static final Frameworks SPRING  = new Frameworks();
    public static final Frameworks NEST    = new Frameworks();
    public static final Frameworks EXPRESS = new Frameworks();
}

굉장히 복잡한 코드가 완성된다. 그렇기 때문에 다음과 같이 Java는 위의 코드를 변경해서 작성할 수 있다.


enum Seasons { SPRING, SUMMER, FALL, WINTER }
enum Frameworks { DJANGO, SPRING, NEST, EXPRESS }

타입 안전성

타입의 안전성에 대한 이해가 잘 안될 것이다. 다음 코드를 보자. 위의 enum을 사용하지 않고 switch문을 사용하면 다음과 같은 결과가 나온다.

class Seasons {
    public static final Seasons SPRING = new Seasons();
    public static final Seasons SUMMER = new Seasons();
    public static final Seasons FALL   = new Seasons();
    public static final Seasons WINTER = new Seasons();
}

public class Main {
    public static void main(String[] args) {
        Seasons seasons = Seasons.SPRING;
        switch (seasons) {
            case Seasons.SPRING
                System.out.println(봄);
                break;
            case Seasons.SUMMER
                System.out.println(여름);
                break;
            case Seasons.FALL
                System.out.println(가을);
                break;
            case Seasons.WINTER
                System.out.println(겨울);
                break;
        }
    }
}

→출력값 incompatible type 
switch문의 조건은 원래 char, byte, short, int, Character, byte,Short,String, Integer, enum의 형태만 받아들이는데 위는 사용자 정의 형태의 변수를 사용해 switch문이 이를 받아들이지 못한 케이스다.

반면 enum을 사용하게 되면
enum Seasons {SPRING, SUMMER, FALL, WINTER}

public class Main {
    public static void main(String[] args) {
        Seasons seasons = Seasons.SPRING;
        switch (seasons) {
            case SPRING
                System.out.println(봄);
                break;
            case SUMMER
                System.out.println(여름);
                break;
            case FALL
                System.out.println(가을);
                break;
            case WINTER
                System.out.println(겨울);
                break;
        }
    }
}
매끄럽게 코드가 순환되는 것을 확인할 수 있다. 이처럼, enum을 사용하게 되면 많은 문법에서 이해하는 타입 형태의 변수로 선언되는 것을 타입 안정성이라고 한다.

enum의 사용

enum 열거형의_이름{상수명, 상수명1,상수명2}

다음 예제를 보면 쉽게 이해할 수 있다.
enum{ SPRING, SUMMER, FALL, WINTER} 각각,0,1,2,3의 정수값이 변수에 할당된다.

#열거형에서 사용할 수 있는 메서드#
name()		열거 객체가 가지고 있는 문자열을 리턴, 문자열은 선언할 때 작성한                            
			변수 이름
ordinal()	열거 객체의 순번(int)을 리턴
compareTo()	매개값과 비교해서 순번 차이(int)를 리턴
valueOf()	주어진 문자열의 열거 객체(열거 타입)를 리턴
values()	모든 열거 객체들을 배열(열거 배열)로 리턴


